#!/usr/bin/env bash

 # NOTICE: This script is made for linux, and probably will run on mac os, but windows is not supported

# Colors
RED="\e[31m"
GREEN="\e[32m"
YELLOW="\e[33m"
BLUE="\e[34m"
MAGENTA="\e[35m"
ENDCOLOR="\e[0m"

# Variables
VERSION="alphaV1.0"
discord_link="https://github.com/kaneki-hacker/discord-python-blueprint.git"
backup_dir="backup"
#
# Project files folder
#
files_directory="/usr/local/share/$0"
files_git_repository=""


# Functions
helping ()
{
  # This function is used to display help
  echo -e "${MAGENTA}The following is the right usage to the script:${ENDCOLOR}"
  echo -e "   ${GREEN}To create a new project: $0 new <PROJECT TYPE> <PROJECT DIRECTORY NAME>${ENDCOLOR}"
  echo -e "   ${GREEN}To get help: $0 ? or $0 help${ENDCOLOR}"
  echo -e "   ${GREEN}To backup a project: $0 backup${ENDCOLOR}"
  exit 0
}

wrong ()
{
  # This function is activated when there's a wrong usage
  echo -e "${RED}Wrong usage!!${ENDCOLOR}"
  echo -e "${GREEN}Check out: '$0 help', to get the full usage of the script!${ENDCOLOR}"
  exit 1
}

version ()
{
  # This function will return the version of the script and 
  echo -e "${GREEN}The script's version: ${VERSION}.${ENDCOLOR}"
  echo -e "${YELLOW}To see the full usage use: $0 help or $0 ?${ENDCOLOR}"
  exit 0
}

check_dependecies ()
{
  # This function will check for the script dependencies then see if it could fix them
  echo "Still need work"
  exit 1
}

github_cloning ()
{
  # This function will be used to controle cloning files from github
  if [[ -z "$1" ]]; then
    echo -e "${RED}The script didn't supply the github repositorie! Exiting!${ENDCOLOR}"
    exit 1
  fi
  local repo="$1"
  echo -e "${GREEN}Currently cloning a repositorie...${ENDCOLOR}"
  echo -e "${YELLOW}Don't quit the script!!${ENDCOLOR}"
  git clone $repo && echo -e "Cloned successfully!" || echo -e "${RED}NOt cloned" && exit 1
}

new ()
{
  # This function will handle creating new projects then connecting my current project status to the discord servers.
  # TODO: Make some error checking
  if [[ -z "$1" ]]; then
    echo -e "${RED}You have to suply the project type!!${ENDCOLOR}"
    echo -e "${GREEN}The correct syntax: $0 new <PROJECT TYPE> <PROJECT NAME>${ENDCOLOR}"
    echo -e "${RED}Check out: '$0 help' for the complete usage!${ENDCOLOR}"
    exit 1
  elif [[ -z "$2" ]]; then
    echo -e "${RED}Wrong usage: You have to supply the project name to create a directory for!${ENDCOLOR}"
    echo -e "${GREEN}The correct syntax: $0 new <PROJECT TYPE> <PROJECT NAME>${ENDCOLOR}"
    echo -e "${YELLOW}Check out: '$0 help' or '$0 ?' for the complete usage!${ENDCOLOR}"
    exit 1
  fi
  local pr_name=$1
  local directory_name=$2
  echo -e "${BLUE}Project is creating...${ENDCOLOR}"
  if [[ "$pr_name" == "python" ]]; then
    # TODO: add the cheking mekanisme for all the dependencies of the project before starting
    echo -e "${MAGENTA}The project type choosed is python!!${ENDCOLOR}"
    echo -e "${RED}Are you sure you want to create this project?(y/n)${ENDCOLOR}"
    read choice
    if [[ "$choice" == "y" ]]; then
      echo -e "${RED}Creating resumed!${ENDCOLOR}"
      mkdir $directory_name
      cd $directory_name
      eval "python3.12 -m venv venv"
      sleep 2
      echo -e "${GREEN}Finished project creating!!${ENDCOLOR}"
      echo -e "${MAGENTA}Change your directory to the newly created directory and start creating!"
      exit 0
    elif [[ "$choice" == "n" ]]; then
      echo -e "${RED}Aborting project creating!${ENDCOLOR}"
      exit 0
    else
      echo -e "${RED}You choose a wrong option! exiting${ENDCOLOR}"
      exit 1
    fi
  elif [[ "$pr_name" == "discord" ]]; then
    echo -e "${MAGENTA}Creating a discord project!${ENDCOLOR}"
    echo -e "${RED}Are you sure you want to create this project?(y/n)${ENDCOLOR}"
    read choice
    if [[ "$choice" == "y" ]]; then
      echo -e "${GREEN}Project creating resumed...${ENDCOLOR}"
      mkdir $directory_name
      cd $directory_name
      git clone $discord_link
      echo -e "${GREEN}Project creating is complete!${ENDCOLOR}"
      exit 0
    elif [[ "$choice" == "n" ]]; then
      echo -e "${RED}Aborting project creating!${ENDCOLOR}"
      exit Â°0
    else
      echo -e "${RED}You choosed a wrong option! Exiting!${ENDCOLOR}"
      exit 1
    fi
  fi

}

backup ()
{
   # This function will be used to back up the current project directory
   echo -e "${GREEN}Backuping the current project...${ENDCOLOR}"
   echo -e "${RED}Do you really wanna backup the current project?(y/n)${ENDCOLOR}"
   read choice
   if [[ "$choice" == "y" ]]; then
     echo -e "${GREEN}Resumed...${ENDCOLOR}"
     if [[ ! -d "$backup_dir" ]]; then
       mkdir $backup_dir
     fi
     tar --exclude-backups -czvf ./$backup_dir/project_backup_$(date +%F).tar.gz ./* 2>/tmp/logs.txt 
     echo -e "${GREEN}Finished backuping the project!${ENDCOLOR}"
     exit 0
   fi
}

# TODO: Make an install script function!!

# TODO: make a function to automate github clonning!

# TODO: Create a function to clone all the necessary repositories from github
# TODO: Create a function that checks for the "/usr/local/share/" if my app files are there, if not clone them and then store them localy
# TODO: Add more functionality to my script


# Main file entry

case "$1" in
  install | i)
    echo -e "${MAGENTA}NOT HERE YET AGAIN, But still under work!"
    ;;
  new)
    new "$2" "$3"
    ;;
  backup)
    backup
    ;;
  version | v)
    version
    ;;
  ? | help)
    helping
    ;;
  *)
    wrong
    ;;
esac

