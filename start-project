#!/usr/bin/env bash

 # NOTICE: This script is made for linux, and probably will run on mac os, but windows is not supported

# Colors
RED="\e[31m"
GREEN="\e[32m"
YELLOW="\e[33m"
BLUE="\e[34m"
MAGENTA="\e[35m"
ENDCOLOR="\e[0m"

# Variables
VERSION="alphaV1.0"
discord_link="https://github.com/kaneki-hacker/discord-python-blueprint.git"
backup_dir="backup"
presence_file="presence.py"
install_dir="/tmp/$0"
discord_dir="discord-python-blueprint"
#
# Project files folder
#
files_directory="/usr/local/share/$0"
files_git_repository="https://github.com/kaneki-hacker/project-starter.git"


# Functions
helping ()
{
  # This function is used to display help
  echo -e "${MAGENTA}The following is the right usage to the script:${ENDCOLOR}"
  echo -e "   ${GREEN}TO download the script files: $0 install <Installating mode>${ENDCOLOR}"
  echo -e "   ${GREEN}To create a new project: $0 new <PROJECT TYPE> <PROJECT DIRECTORY NAME>${ENDCOLOR}"
  echo -e "   ${GREEN}To get help: $0 ? or $0 help${ENDCOLOR}"
  echo -e "   ${GREEN}To backup a project: $0 backup${ENDCOLOR}"
  exit 0
}

wrong ()
{
  # This function is activated when there's a wrong usage
  echo -e "${RED}Wrong usage!!${ENDCOLOR}"
  echo -e "${GREEN}Check out: '$0 help', to get the full usage of the script!${ENDCOLOR}"
  exit 1
}

version ()
{
  # This function will return the version of the script and 
  echo -e "${GREEN}The script's version: ${VERSION}.${ENDCOLOR}"
  echo -e "${YELLOW}To see the full usage use: $0 help or $0 ?${ENDCOLOR}"
  exit 0
}

command_exists ()
{
  command -v "$1" >/dev/null 2&1
}


check_dependecies ()
{
  # This function will check for the script main dependencies then see if it could fix them
  echo -e "${MAGENTA}Cheking dependencies...${ENDCOLOR}"
  if command_exists python3.11; then
    echo -e "${GREEN}Python3 is available in the system!${ENDCOLOR}"
  else
    echo -e "${RED}Python3 needs to be installed!${ENDCOLOR}"
    exit 1
  fi
  if python3.11 -m pip --version >/dev/null 2>&1; then
    echo -e "${GREEN}Pip is available on the system!${ENDCOLOR}"
  else
    echo -e "${RED}Pip is not present in the system!${ENDCOLOR}"
    exit 1
  fi
  if python3.11 -m venv --help >/dev/null 2>&1; then
    echo -e "${GREEN}Venv is available in the system!${ENDCOLOR}"
  else
    echo -e "${RED}Venv is not present in the system!${ENDCOLOR}"
    exit 1
  fi
}

check_files ()
{
  # This function will check for the files that this script needs!
  echo -e "${RED}Checking for files!${ENDCOLOR}"
  if [[ ! -d "$files_directory" ]]; then
    echo -e "${RED}The directory for the project files in not available!${ENDCOLOR}"
    exit 1
  else
    echo -e "${GREEN}The project directory exists!${ENDCOLOR}"
  fi
  if [[ -f "$presence_file" ]]; then
    echo -e "There's presence"
  else
    echo -e "${RED}Some files are needed!${ENDCOLOR}"
    echo -e "${RED}Install all the script dependencies using: '$0 install all' or check: '$0 help' for the full usage"
    exit 1
  fi
}

github_cloning ()
{
  # This function will be used to controle cloning files from github
  if [[ -z "$1" ]]; then
    echo -e "${RED}The script didn't supply the github repositorie! Exiting!${ENDCOLOR}"
    exit 1
  fi
  local repo="$1"
  echo -e "${GREEN}Currently cloning a repositorie...${ENDCOLOR}"
  echo -e "${YELLOW}Don't quit the script!!${ENDCOLOR}"
  git clone $repo > /tmp/logss && echo -e "Cloned successfully!" || echo -e "${RED}NOt cloned" 
}

discord_connection ()
{
  # This function will be used to connect the project to the discord servers!
  echo -e "${GREEN}Connecting the project to the discord presence!${ENDCOLOR}"
  eval "python3.11 $presence_file" || echo -e "Couldn't connect!"
  sleep 1
  echo -e "${RED}Finished${ENDCOLOR}"
}

new ()
{
  # This function will handle creating new projects then connecting my current project status to the discord servers.
  # TODO: Make some error checking
  if [[ -z "$1" ]]; then
    echo -e "${RED}You have to suply the project type!!${ENDCOLOR}"
    echo -e "${GREEN}The correct syntax: $0 new <PROJECT TYPE> <PROJECT NAME>${ENDCOLOR}"
    echo -e "${RED}Check out: '$0 help' for the complete usage!${ENDCOLOR}"
    exit 1
  elif [[ -z "$2" ]]; then
    echo -e "${RED}Wrong usage: You have to supply the project name to create a directory for!${ENDCOLOR}"
    echo -e "${GREEN}The correct syntax: $0 new <PROJECT TYPE> <PROJECT NAME>${ENDCOLOR}"
    echo -e "${YELLOW}Check out: '$0 help' or '$0 ?' for the complete usage!${ENDCOLOR}"
    exit 1
  fi
  local pr_name=$1
  local directory_name=$2
  echo -e "${BLUE}Project is creating...${ENDCOLOR}"
  if [[ "$pr_name" == "python" ]]; then
    # TODO: add the cheking mekanisme for all the dependencies of the project before starting
    echo -e "${MAGENTA}The project type choosed is python!!${ENDCOLOR}"
    echo -e "${RED}Checking python dependencies...${ENDCOLOR}"
    check_dependecies
    echo -e "${GREEN}Finished checking everything is good!${ENDCOLOR}"
    echo -e "${RED}Are you sure you want to create this project?(y/n)${ENDCOLOR}"
    read choice
    if [[ "$choice" == "y" ]]; then
      echo -e "${RED}Creating resumed!${ENDCOLOR}"
      mkdir $directory_name
      cd $directory_name
      eval "python3.12 -m venv venv"
      sleep 2
      echo -e "${GREEN}Finished project creating!!${ENDCOLOR}"
      echo -e "${MAGENTA}Change your directory to the newly created directory and start creating!"
      exit 0
    elif [[ "$choice" == "n" ]]; then
      echo -e "${RED}Aborting project creating!${ENDCOLOR}"
      exit 0
    else
      echo -e "${RED}You choose a wrong option! exiting${ENDCOLOR}"
      exit 1
    fi
  elif [[ "$pr_name" == "discord" ]]; then
    echo -e "${MAGENTA}Creating a discord project!${ENDCOLOR}"
    echo -e "${RED}Are you sure you want to create this project?(y/n)${ENDCOLOR}"
    read choice
    if [[ "$choice" == "y" ]]; then
      echo -e "${GREEN}Project creating resumed...${ENDCOLOR}"
      mkdir $directory_name
      cd $directory_name
      github_cloning "$discord_link"
      echo -e "${GREEN}Project creating is complete!${ENDCOLOR}"
      exit 0
    elif [[ "$choice" == "n" ]]; then
      echo -e "${RED}Aborting project creating!${ENDCOLOR}"
      exit 0
    else
      echo -e "${RED}You choosed a wrong option! Exiting!${ENDCOLOR}"
      exit 1
    fi
  fi

}

backup ()
{
   # This function will be used to back up the current project directory
   echo -e "${GREEN}Backuping the current project...${ENDCOLOR}"
   echo -e "${RED}Do you really wanna backup the current project?(y/n)${ENDCOLOR}"
   read choice
   if [[ "$choice" == "y" ]]; then
     echo -e "${GREEN}Resumed...${ENDCOLOR}"
     if [[ ! -d "$backup_dir" ]]; then
       mkdir $backup_dir
     fi
     tar --exclude-backups -czvf ./$backup_dir/project_backup_$(date +%F).tar.gz ./* 2>/tmp/logs.txt 
     echo -e "${GREEN}Finished backuping the project!${ENDCOLOR}"
     exit 0
   fi
}

# Installating modes
install_all ()
{
  # This function will be used to install all the possible dependencies
  echo -e "${GREEN}Choosen the install all mode!${ENDCOLOR}"
  echo -e "${GREEN}Process started...${ENDCOLOR}"
  install_python
  install_discord_bot_dev
}
intall_python ()
{
  # This function will only install python dependencies 
  echo -e "Python will be installed shortly"
  if command_exists python3.11; then
    echo -e "${GREEN}Python already exists!${ENDCOLOR}"
    exit 0
  fi
  apt update && apt install -y python3.11 python3.11-pip python3.11-venv \
    && sleep 1 \
    && echo -e "${GREEN}Finished Downloading python3 and it's packages${ENDCOLOR}" \
    || echo -e "${RED}An error has occured while downloading python!${ENDCOLOR}"
  exit 0
}

install_discord_bot_dev ()
{
  # This function will install the packages necessary for discord bot development
  echo -e "${GREEN}The discord development files will be installed shortly"
  if [[ ! -d $files_directory ]]; then
    mkdir $files_directory \
      && chown $USER:$USER $files_directory
  fi
  if [[ ! -d $files_directory/$discord_dir ]]; then
    if [[ ! -d $install_dir ]]; then
      mkdir $install_dir
    elif [[ -d $install_dir ]]; then
      if [[ -d $install_dir/$discord_dir ]]; then
        mv $install_dir/$discord_dir $files_directory/$discord_dir/ \
          && cd $files_directory/$discord_dir \
          && eval "pÃ®p3.11 install -r requirements.txt" \
          && echo -e "${GREEN}Installed successfully!${ENDCOLOR}" \        
          || echo -e "${RED}An error occured while creating the discord dependecies!${ENDCOLOR}"
        rm -r $install_dir
        exit 0
      fi
    fi
    cd $install_dir \
      && github_cloning $discord_link 1>/dev/null \
      && mv $install_dir/$discord_dir $files_directory/$discord_dir/ \
      && cd $files_directory/ \
      && chown $USER:$USER $discord_dir \
      && cd $discord_dir \
      && eval "pip3.11 install -r requirements.txt" \
      && echo -e "${GREEN}Installed everything successfully!${ENDCOLOR}" \
      || echo -e "${RED}An error has occured while installing the dependencies!${ENDCOLOR}"
  else
    cd $files_directory/$discord_dir \
      && eval "pip3.11 install -r requirements.txt" \
      && echo -e "${GREEN}INstalled everythin successfully!${ENDCOLOR}" \
      || echo -e "${RED}An error has occured while downloading the dependencies!${ENDCOLOR}"
  fi
  exit 0
}

installating ()
{
  # This script will install all the necessary dependencies or the whole project
  echo -e "${MAGENTA}Starting the installating mode!${ENDCOLOR}"
  echo -e "${RED}Notice: this function needs to be run with root privilages!${ENDCOLOR}"
  if [[ "$EUID" -ne 0 ]]; then
    echo -e "${RED}Not run with root! Exiting!${ENDCOLOR}"
    exit 1
  fi
  if [[ -z "$1" || "$1" == "all" ]]; then
    echo -e "${RED}No mode have been specified!${ENDCOLOR}"
    echo -e "${RED}Using default all!${ENDCOLOR}"
    install_all
  else
    echo -e "A mode have been choosen"
    local mode="$1"
    if [[ "$mode" == "python" ]]; then
      echo -e "${MAGENTA}Choosed python download!${ENDCOLOR}"
      echo -e "${MAGENTA}Starting...${ENDCOLOR}"
      install_python
    fi
  fi
}



# TODO: Create a function to clone all the necessary repositories from github
# TODO: Create a function that checks for the "/usr/local/share/" if my app files are there, if not clone them and then store them localy
# TODO: Add more functionality to my script
#

# Main file entry

case "$1" in
  install | i)
    installating "$2"
    ;;
  new)
    new "$2" "$3"
    ;;
  backup)
    backup
    ;;
  version | v)
    version
    ;;
  ? | help)
    helping
    ;;
  *)
    wrong
    ;;
esac

